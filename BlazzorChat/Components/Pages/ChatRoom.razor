@page "/chatroom"
@inject NavigationManager navigationManager
@rendermode InteractiveServer
@using BackendLab01
@using BlazzorChat.Hubs
@using Microsoft.AspNetCore.SignalR.Client
@inject IChatUserService services

<h1>Blazor SignalR Chat Sample</h1>
<hr />

@if (!_isChatting)
{
    <p>Enter your name to start chatting:</p>
    <input type="text" maxlength="32" @bind="_username" />
    <button type="button" @onclick="Chat">
        <span class="oi oi-chat" aria-hidden="true"></span> Chat!
    </button>
    
    @if (!string.IsNullOrEmpty(_message))
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@_username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="DisconnectAsync">Disconnect</button>
    </div>
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="_newMessage"></textarea>
        <button class="btn btn-default" @onclick="() => SendAsync(_newMessage)">Send</button>
        <select class="form-select" @bind="_to">
            <option value="All">All</option>
            @foreach (var user in services.GetAll().Where(u => u.Username != _username))
            {
                <option value="@user.Username">@user.Username</option>
            }
        </select>
    </div>
}

@code {
    private bool _isChatting = false;
    private string _username;
    private string _message;
    private string _newMessage;
    private List<Message> _messages = new List<Message>();

    private string _hubUrl;
    private HubConnection _hubConnection;
    private string _to = "All";

    public async Task Chat()
    {
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        }

        try
        {
            _isChatting = true;
            await Task.Delay(1);
            _messages.Clear();

            string baseUrl = navigationManager.BaseUri;
            _hubUrl = baseUrl.TrimEnd('/') + BlazorChatHub.HubUrl; // Używamy BlazorChatSampleHub

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);
            _hubConnection.On<string, string>("Private", PrivateMessage);
            await _hubConnection.StartAsync();

            // Dodajemy użytkownika do serwisu
            services.Add(_hubConnection.ConnectionId, _username);

            await SendAsync($"[Notice] {_username} joined chat room.");
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void PrivateMessage(string name, string message)
    {
        _messages.Add(new Message(name, $"[Private]: {message}", false));
        InvokeAsync(StateHasChanged);
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);
        // Jeśli wiadomość wysłana lokalnie już istnieje, pomijamy jej dodanie
        if (isMine && _messages.Any(m => m.Username == name && m.Body == message && m.Mine))
            return;
            
        _messages.Add(new Message(name, message, isMine));
        InvokeAsync(StateHasChanged);
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} left chat room.");
            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            // Usuwamy użytkownika z serwisu
            services.RemoveByName(_username);

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            if (_to == "All")
            {
                // Dodaj wiadomość lokalnie jako broadcast
                _messages.Add(new Message(_username, message, true));
                StateHasChanged();
                await _hubConnection.SendAsync("Broadcast", _username, message);
            }
            else
            {
                // Dodaj wiadomość lokalnie jako prywatną
                _messages.Add(new Message(_username, $"[Private]: {message}", true));
                StateHasChanged();
                var connectionId = services.GetConnectionIdByName(_to);
                await _hubConnection.SendAsync("Private", _username, connectionId, message);
            }
            _newMessage = string.Empty;
        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }
        public bool IsNotice => Body.StartsWith("[Notice]");
        public string CSS => Mine ? "sent" : "received";
    }
}
